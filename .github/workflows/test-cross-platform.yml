name: Cross-Platform Testing

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  test-macos:
    runs-on: macos-latest
    strategy:
      matrix:
        python-version: [3.8, 3.9, 3.10, 3.11, 3.12]
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install build wheel
    
    - name: Build package
      run: |
        python -m build
    
    - name: Test installation from wheel
      run: |
        # Create virtual environment
        python -m venv test_env
        source test_env/bin/activate
        
        # Install from built wheel
        pip install dist/*.whl
        
        # Test imports
        python -c "import snid_sage; print('SNID SAGE imported successfully')"
        python -c "from snid_sage.interfaces.gui.sage_gui import main; print('GUI imports successfully')"
        
        # Run setup script test
        python setup_cross_platform.py --test-only
        
        # Test platform detection
        python -c "from snid_sage.shared.utils.config.platform_config import get_platform_config; config = get_platform_config(); print(f'Platform: {config.platform_name}')"
    
    - name: Test PyPI installation
      run: |
        # Create fresh virtual environment
        python -m venv pypi_test_env
        source pypi_test_env/bin/activate
        
        # Install from TestPyPI
        pip install -i https://test.pypi.org/simple/ snid-sage==1.2.1
        
        # Test basic functionality
        python -c "import snid_sage; print('PyPI installation successful')"

  test-windows:
    runs-on: windows-latest
    strategy:
      matrix:
        python-version: [3.8, 3.9, 3.10, 3.11, 3.12]
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install build wheel
    
    - name: Build package
      run: |
        python -m build
    
    - name: Test installation from wheel
      run: |
        # Create virtual environment
        python -m venv test_env
        test_env\Scripts\activate
        
        # Install from built wheel
        pip install dist\*.whl
        
        # Test imports
        python -c "import snid_sage; print('SNID SAGE imported successfully')"
        python -c "from snid_sage.interfaces.gui.sage_gui import main; print('GUI imports successfully')"
        
        # Run setup script test
        python setup_cross_platform.py --test-only

  test-linux:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: [3.8, 3.9, 3.10, 3.11, 3.12]
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
    
    - name: Install system dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y python3-tk
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install build wheel
    
    - name: Build package
      run: |
        python -m build
    
    - name: Test installation from wheel
      run: |
        # Create virtual environment
        python -m venv test_env
        source test_env/bin/activate
        
        # Install from built wheel
        pip install dist/*.whl
        
        # Test imports
        python -c "import snid_sage; print('SNID SAGE imported successfully')"
        python -c "from snid_sage.interfaces.gui.sage_gui import main; print('GUI imports successfully')"
        
        # Run setup script test
        python setup_cross_platform.py --test-only 